{{#each @root}}
[[FileSetFile/RelativePath[../{{@key}}StateMachineBase.h]]]
#pragma once
// Adjusted StateMachine.h Template for {{@key}}StateMachine

enum class State {
  {{#each MachineStates.MachineState}}
  {{Name}},
  {{/each}}
  // Add additional states here
};

virtual void checkingState();
String stateToString(State stateToStringify);

class {{@key}}StateMachineBase {
protected:
  State currentState;
  int beepsBeeped = 0;
  virtual void checkingState() {};
  virtual String stateToString(State stateToStringify);

public:
  {{@key}}StateMachineBase();
  void checkState();
  
  // State transition utility methods
  virtual void transitionTo(State newState);
  virtual void onExit(State fromState, State toState);
  virtual void onEnter(State fromState, State toState);

  virtual void beep(int duration = 1000);
  virtual void emitAlarmBeep();

  {{#each MachineStates.MachineState}}
  // Enter and Exit methods for {{Name}} state
  virtual void enter{{Name}}() {};
  virtual void exit{{Name}}() {};

  // Action handlers for the {{Name}} state
  {{#each FromTransitions.FromTransition}}
  virtual bool has{{../Name}}_{{ActionName}}() { return false; };
  {{/each}}
  {{/each}}
};

{{!-- StateMachine.cpp Template --}}
[[FileSetFile/RelativePath[../{{@key}}StateMachineBase.cpp]]]
#pragma once
// Adjusted StateMachine.cpp Template for {{@key}}StateMachine
#include "{{@key}}StateMachineBase.h"

{{@key}}StateMachineBase::{{@key}}StateMachineBase() : currentState(State::{{#each FSMs}}{{InitialStateName}}{{/each}}) {
  onEnter(currentState, currentState); // Initial state entry actions
}

void {{@key}}StateMachineBase::checkState() {
  checkingState();
  switch (currentState) {
    {{#each MachineStates.MachineState}}
    case State::{{Name}}:
     {{#each FromTransitions.FromTransition}}
      if (has{{../Name}}_{{ActionName}}()) {
        transitionTo(State::{{ToStateName}});  // Transition based on specific action being true
        return;
      }
      {{/each}}
      break;
   {{/each}}
  }
}

void {{@key}}StateMachineBase::transitionTo(State newState) {
  onExit(currentState, newState);
  State lastState = currentState ;
  currentState = newState;
  onEnter(lastState, newState);
}

void {{@key}}StateMachineBase::onExit(State currentState, State newState) {
  switch (currentState) {
    {{#each MachineStates.MachineState}}
    case State::{{Name}}:
      exit{{Name}}(newState);
      break;
    {{/each}}
  }
}

void {{@key}}StateMachineBase::onEnter(State currentState, State newState) {
  switch (currentState) {
    {{#each MachineStates.MachineState}}
    case State::{{Name}}:
      enter{{Name}}(currentState);
      break;
    {{/each}}
  }
}


void {{@key}}StateMachineBase::beep(int duration = 1000) {
  tone(status_beeps_speaker, 440, ms_between_beeps * 2);
  digitalWrite(status_status_led, HIGH);  // Turn the LED on (HIGH is the voltage level)
  delay(ms_between_beeps);     // Wait for a second (1000 milliseconds)
  digitalWrite(status_status_led, LOW);   // Turn the LED off by making the voltage LOW
  delay(ms_between_beeps);     // Wait for a second (1000 milliseconds)
}

void {{@key}}StateMachineBase::emitAlarmBeep() {
  //Serial.println("beeping");
  beep(ms_between_beeps);
  beepsBeeped++;
}

String {{@key}}StateMachineBase::stateToString(State stateToStringify) {
  switch (stateToStringify) {
    {{#each MachineStates.MachineState}}
    case State::{{Name}}:
      return "{{Name}}";
      break;
{{/each}}
    default:
      return "Unknown State enum value: " + String((int)stateToStringify);
  }
}


{{#each MachineStates.MachineState}}
[[FileSetFile/RelativePath[../{{Name}}.cpp:never]]]
#pragma once
#include "MedReminderStateMachine.h"

{{#each FromTransitions.FromTransition}}
virtual bool {{@../../key}}StateMachine::has{{../Name}}_{{ActionName}}() {
  // Check condition for {{ActionName}} in {{../Name}} state
  return true;
}
{{/each}}

virtual void {{@../key}}StateMachine::enter{{Name}}() {}

virtual void {{@../key}}StateMachine::exit{{Name}}() {}
{{/each}}

[[FileSetFile/RelativePath[../{{@key}}StateMachine.h:never]]]
#pragma once

#include <Arduino.h>

#include "MedReminderStateMachine.h"

void beep(int duration = 1000);
void emitAlarmBeep();


{{!-- Common.cpp (initial take anyway) --}}
[[FileSetFile/RelativePath[../{{@key}}StateMachine.cpp:never]]]
#pragma once

#include "MedReminderStateMachine.h"

void checkingState() {
  // Serial.Println("Checking state in Common.cpp");
}


void MedReminderStateMachine::onEnter(State fromState, State toState) {
  MedReminderStateMachineBase::onEnter(fromState, toState);
  // Serial.println("Transition from: " + stateToString(fromState) + " -> " + stateToString(toState));
}

{{/each}}