<MedReminder><Constants><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>debounceDelay</Name><Description>Debounce delay in milliseconds</Description><CustomDescription>Debounce delay in milliseconds</CustomDescription><CustomConstantValue>500</CustomConstantValue><Type>unsigned long</Type><Category>Debouncing</Category><VariableNameCamelCase>debounceDelay</VariableNameCamelCase><LowerVariableName>debounce_delay</LowerVariableName><ArduinoConstantCore>const unsigned long debounce_delay</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned long debounce_delay;</ArduinoConstantHeader><ConstantValue>500</ConstantValue><ArduinoConstant>const unsigned long debounce_delay = 500; // Debounce delay in milliseconds</ArduinoConstant><CategoryLabel>Debouncing constants</CategoryLabel></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>wheelTurnDebounceMs</Name><Description>Debounce time for wheel turn detection</Description><CustomDescription>Debounce time for wheel turn detection</CustomDescription><CustomConstantValue>150</CustomConstantValue><Type>unsigned long</Type><Category>Debouncing</Category><VariableNameCamelCase>wheelTurnDebounceMs</VariableNameCamelCase><LowerVariableName>wheel_turn_debounce_ms</LowerVariableName><ArduinoConstantCore>const unsigned long wheel_turn_debounce_ms</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned long wheel_turn_debounce_ms;</ArduinoConstantHeader><ConstantValue>150</ConstantValue><ArduinoConstant>const unsigned long wheel_turn_debounce_ms = 150; // Debounce time for wheel turn detection</ArduinoConstant></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>quickTurnThresholdMs</Name><Description>Threshold for quick turn detection</Description><CustomDescription>Threshold for quick turn detection</CustomDescription><CustomConstantValue>300</CustomConstantValue><Type>unsigned long</Type><Category>Debouncing</Category><VariableNameCamelCase>quickTurnThresholdMs</VariableNameCamelCase><LowerVariableName>quick_turn_threshold_ms</LowerVariableName><ArduinoConstantCore>const unsigned long quick_turn_threshold_ms</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned long quick_turn_threshold_ms;</ArduinoConstantHeader><ConstantValue>300</ConstantValue><ArduinoConstant>const unsigned long quick_turn_threshold_ms = 300; // Threshold for quick turn detection</ArduinoConstant></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>statusBeeps_Speaker</Name><Description>The status_beeps_speaker wire connects Pin-2 to a speaker emitting auditory beeps for status alerts in an orange color.</Description><ConstantForPartLink>recUzAMBYEgLQPVOc</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>statusBeeps_Speaker</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>statusBeeps_Speaker</VariableNameCamelCase><LowerVariableName>status_beeps_speaker</LowerVariableName><ArduinoConstantCore>const unsigned int status_beeps_speaker</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int status_beeps_speaker;</ArduinoConstantHeader><ConstantForPartLinkDescription>The status_beeps_speaker wire connects Pin-2 to a speaker emitting auditory beeps for status alerts in an orange color.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>2</ConstantForPartLinkPinNumber><ConstantValue>2</ConstantValue><ArduinoConstant>const unsigned int status_beeps_speaker = 2; // The status_beeps_speaker wire connects Pin-2 to a speaker emitting auditory beeps for status alerts in an orange color.</ArduinoConstant><CategoryLabel>Parts constants</CategoryLabel><ConstantForPartLinkLowerVairableName>status_beeps_speaker</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>bit1Status_Led</Name><Description>The bit1_status_led wire runs from Pin-3 to a white LED indicating the status of the first bit for medication timing.</Description><ConstantForPartLink>reco9mF15Qa0N4ZU8</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>bit1Status_Led</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>bit1Status_Led</VariableNameCamelCase><LowerVariableName>bit1_status_led</LowerVariableName><ArduinoConstantCore>const unsigned int bit1_status_led</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int bit1_status_led;</ArduinoConstantHeader><ConstantForPartLinkDescription>The bit1_status_led wire runs from Pin-3 to a white LED indicating the status of the first bit for medication timing.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>3</ConstantForPartLinkPinNumber><ConstantValue>3</ConstantValue><ArduinoConstant>const unsigned int bit1_status_led = 3; // The bit1_status_led wire runs from Pin-3 to a white LED indicating the status of the first bit for medication timing.</ArduinoConstant><ConstantForPartLinkLowerVairableName>bit1_status_led</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseBit1_HallEffectSensor</Name><Description>Connecting Pin-4 to a white Hall Effect Sensor, the sense_bit1_hall_effect_sensor wire senses the first bit's magnetic field change.</Description><ConstantForPartLink>recUm9oFBRBzaKNcp</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>senseBit1_HallEffectSensor</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>senseBit1_HallEffectSensor</VariableNameCamelCase><LowerVariableName>sense_bit1_hall_effect_sensor</LowerVariableName><ArduinoConstantCore>const unsigned int sense_bit1_hall_effect_sensor</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int sense_bit1_hall_effect_sensor;</ArduinoConstantHeader><ConstantForPartLinkDescription>Connecting Pin-4 to a white Hall Effect Sensor, the sense_bit1_hall_effect_sensor wire senses the first bit's magnetic field change.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>4</ConstantForPartLinkPinNumber><ConstantValue>4</ConstantValue><ArduinoConstant>const unsigned int sense_bit1_hall_effect_sensor = 4; // Connecting Pin-4 to a white Hall Effect Sensor, the sense_bit1_hall_effect_sensor wire senses the first bit's magnetic field change.</ArduinoConstant><ConstantForPartLinkLowerVairableName>sense_bit1_hall_effect_sensor</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseBit1_HallEffectSensor</Name><Description>The latch_bit1_latching_switch wire from Pin-4 to a white Latching Switch captures the first bit's physical state changes.</Description><ConstantForPartLink>rec85jzX4EnaR4xlH</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>latchBit1_LatchingSwitch</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>latchBit1_LatchingSwitch</VariableNameCamelCase><LowerVariableName>latch_bit1_latching_switch</LowerVariableName><ArduinoConstantCore>const unsigned int latch_bit1_latching_switch</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int latch_bit1_latching_switch;</ArduinoConstantHeader><ConstantForPartLinkDescription>The latch_bit1_latching_switch wire from Pin-4 to a white Latching Switch captures the first bit's physical state changes.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>4</ConstantForPartLinkPinNumber><ConstantValue>4</ConstantValue><ArduinoConstant>const unsigned int latch_bit1_latching_switch = 4; // The latch_bit1_latching_switch wire from Pin-4 to a white Latching Switch captures the first bit's physical state changes.</ArduinoConstant><ConstantForPartLinkLowerVairableName>latch_bit1_latching_switch</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>bit2Status_Led</Name><Description>From Pin-5, the bit2_status_led wire leads to a blue LED displaying the second bit's status linked to medication events.</Description><ConstantForPartLink>recNmLk1tV6epyIzM</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>bit2Status_Led</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>bit2Status_Led</VariableNameCamelCase><LowerVariableName>bit2_status_led</LowerVariableName><ArduinoConstantCore>const unsigned int bit2_status_led</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int bit2_status_led;</ArduinoConstantHeader><ConstantForPartLinkDescription>From Pin-5, the bit2_status_led wire leads to a blue LED displaying the second bit's status linked to medication events.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>5</ConstantForPartLinkPinNumber><ConstantValue>5</ConstantValue><ArduinoConstant>const unsigned int bit2_status_led = 5; // From Pin-5, the bit2_status_led wire leads to a blue LED displaying the second bit's status linked to medication events.</ArduinoConstant><ConstantForPartLinkLowerVairableName>bit2_status_led</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseBit2_HallEffectSensor</Name><Description>The sense_bit2_hall_effect_sensor wire from Pin-6 to a blue Hall Effect Sensor detects the magnetic changes for the second bit.</Description><ConstantForPartLink>recHQ0RCmt741AGkn</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>senseBit2_HallEffectSensor</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>senseBit2_HallEffectSensor</VariableNameCamelCase><LowerVariableName>sense_bit2_hall_effect_sensor</LowerVariableName><ArduinoConstantCore>const unsigned int sense_bit2_hall_effect_sensor</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int sense_bit2_hall_effect_sensor;</ArduinoConstantHeader><ConstantForPartLinkDescription>The sense_bit2_hall_effect_sensor wire from Pin-6 to a blue Hall Effect Sensor detects the magnetic changes for the second bit.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>6</ConstantForPartLinkPinNumber><ConstantValue>6</ConstantValue><ArduinoConstant>const unsigned int sense_bit2_hall_effect_sensor = 6; // The sense_bit2_hall_effect_sensor wire from Pin-6 to a blue Hall Effect Sensor detects the magnetic changes for the second bit.</ArduinoConstant><ConstantForPartLinkLowerVairableName>sense_bit2_hall_effect_sensor</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseBit2_HallEffectSensor</Name><Description>Pin-6 also connects to a blue Latching Switch through the latch_bit2_latching_switch wire to lock the second bit's state.</Description><ConstantForPartLink>rec2dLPcXlB5mpcr0</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>latchBit2_LatchingSwitch</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>latchBit2_LatchingSwitch</VariableNameCamelCase><LowerVariableName>latch_bit2_latching_switch</LowerVariableName><ArduinoConstantCore>const unsigned int latch_bit2_latching_switch</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int latch_bit2_latching_switch;</ArduinoConstantHeader><ConstantForPartLinkDescription>Pin-6 also connects to a blue Latching Switch through the latch_bit2_latching_switch wire to lock the second bit's state.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>6</ConstantForPartLinkPinNumber><ConstantValue>6</ConstantValue><ArduinoConstant>const unsigned int latch_bit2_latching_switch = 6; // Pin-6 also connects to a blue Latching Switch through the latch_bit2_latching_switch wire to lock the second bit's state.</ArduinoConstant><ConstantForPartLinkLowerVairableName>latch_bit2_latching_switch</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>amPmStatus_Led</Name><Description>A yellow LED connected by the am_pm_status_led wire from Pin-7 indicates the AM or PM medication status.</Description><ConstantForPartLink>recbGiPgVmuXDdbvA</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>amPmStatus_Led</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>amPmStatus_Led</VariableNameCamelCase><LowerVariableName>am_pm_status_led</LowerVariableName><ArduinoConstantCore>const unsigned int am_pm_status_led</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int am_pm_status_led;</ArduinoConstantHeader><ConstantForPartLinkDescription>A yellow LED connected by the am_pm_status_led wire from Pin-7 indicates the AM or PM medication status.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>7</ConstantForPartLinkPinNumber><ConstantValue>7</ConstantValue><ArduinoConstant>const unsigned int am_pm_status_led = 7; // A yellow LED connected by the am_pm_status_led wire from Pin-7 indicates the AM or PM medication status.</ArduinoConstant><ConstantForPartLinkLowerVairableName>am_pm_status_led</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseAmPm_HallEffectSensor</Name><Description>The sense_am_pm_hall_effect_sensor wire from Pin-8 connects to a yellow Hall Effect Sensor to detect AM/PM status changes.</Description><ConstantForPartLink>reclbaQ29uzr9NICQ</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>senseAmPm_HallEffectSensor</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>senseAmPm_HallEffectSensor</VariableNameCamelCase><LowerVariableName>sense_am_pm_hall_effect_sensor</LowerVariableName><ArduinoConstantCore>const unsigned int sense_am_pm_hall_effect_sensor</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int sense_am_pm_hall_effect_sensor;</ArduinoConstantHeader><ConstantForPartLinkDescription>The sense_am_pm_hall_effect_sensor wire from Pin-8 connects to a yellow Hall Effect Sensor to detect AM/PM status changes.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>8</ConstantForPartLinkPinNumber><ConstantValue>8</ConstantValue><ArduinoConstant>const unsigned int sense_am_pm_hall_effect_sensor = 8; // The sense_am_pm_hall_effect_sensor wire from Pin-8 connects to a yellow Hall Effect Sensor to detect AM/PM status changes.</ArduinoConstant><ConstantForPartLinkLowerVairableName>sense_am_pm_hall_effect_sensor</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseAmPm_HallEffectSensor</Name><Description>Also from Pin-8, the latch_am_pm_latching_switch wire links to a yellow Latching Switch for AM/PM state capture.</Description><ConstantForPartLink>recWQCA4hwpJKy7Sq</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>latchAmPm_LatchingSwitch</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>latchAmPm_LatchingSwitch</VariableNameCamelCase><LowerVariableName>latch_am_pm_latching_switch</LowerVariableName><ArduinoConstantCore>const unsigned int latch_am_pm_latching_switch</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int latch_am_pm_latching_switch;</ArduinoConstantHeader><ConstantForPartLinkDescription>Also from Pin-8, the latch_am_pm_latching_switch wire links to a yellow Latching Switch for AM/PM state capture.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>8</ConstantForPartLinkPinNumber><ConstantValue>8</ConstantValue><ArduinoConstant>const unsigned int latch_am_pm_latching_switch = 8; // Also from Pin-8, the latch_am_pm_latching_switch wire links to a yellow Latching Switch for AM/PM state capture.</ArduinoConstant><ConstantForPartLinkLowerVairableName>latch_am_pm_latching_switch</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>wheelStatus_Led</Name><Description>Pin-9's wheel_status_led wire attaches to a red LED, which shows the wheel movement status, reflecting medication dispensing actions.</Description><ConstantForPartLink>recJrcbM89fzFkhxh</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>wheelStatus_Led</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>wheelStatus_Led</VariableNameCamelCase><LowerVariableName>wheel_status_led</LowerVariableName><ArduinoConstantCore>const unsigned int wheel_status_led</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int wheel_status_led;</ArduinoConstantHeader><ConstantForPartLinkDescription>Pin-9's wheel_status_led wire attaches to a red LED, which shows the wheel movement status, reflecting medication dispensing actions.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>9</ConstantForPartLinkPinNumber><ConstantValue>9</ConstantValue><ArduinoConstant>const unsigned int wheel_status_led = 9; // Pin-9's wheel_status_led wire attaches to a red LED, which shows the wheel movement status, reflecting medication dispensing actions.</ArduinoConstant><ConstantForPartLinkLowerVairableName>wheel_status_led</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseWheel_HallEffectSensor</Name><Description>Connecting Pin-10 to a red Hall Effect Sensor, the sense_wheel_hall_effect_sensor wire monitors wheel movements for medication timings.</Description><ConstantForPartLink>recpPKO7mujptxgs9</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>senseWheel_HallEffectSensor</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>senseWheel_HallEffectSensor</VariableNameCamelCase><LowerVariableName>sense_wheel_hall_effect_sensor</LowerVariableName><ArduinoConstantCore>const unsigned int sense_wheel_hall_effect_sensor</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int sense_wheel_hall_effect_sensor;</ArduinoConstantHeader><ConstantForPartLinkDescription>Connecting Pin-10 to a red Hall Effect Sensor, the sense_wheel_hall_effect_sensor wire monitors wheel movements for medication timings.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>10</ConstantForPartLinkPinNumber><ConstantValue>10</ConstantValue><ArduinoConstant>const unsigned int sense_wheel_hall_effect_sensor = 10; // Connecting Pin-10 to a red Hall Effect Sensor, the sense_wheel_hall_effect_sensor wire monitors wheel movements for medication timings.</ArduinoConstant><ConstantForPartLinkLowerVairableName>sense_wheel_hall_effect_sensor</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>senseWheel_HallEffectSensor</Name><Description>The latch_wheel_latching_switch wire from Pin-10 to a red Latching Switch secures the wheel's position post-movement.</Description><ConstantForPartLink>reccuXwXh9BDjQpnQ</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>latchWheel_LatchingSwitch</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>latchWheel_LatchingSwitch</VariableNameCamelCase><LowerVariableName>latch_wheel_latching_switch</LowerVariableName><ArduinoConstantCore>const unsigned int latch_wheel_latching_switch</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int latch_wheel_latching_switch;</ArduinoConstantHeader><ConstantForPartLinkDescription>The latch_wheel_latching_switch wire from Pin-10 to a red Latching Switch secures the wheel's position post-movement.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>10</ConstantForPartLinkPinNumber><ConstantValue>10</ConstantValue><ArduinoConstant>const unsigned int latch_wheel_latching_switch = 10; // The latch_wheel_latching_switch wire from Pin-10 to a red Latching Switch secures the wheel's position post-movement.</ArduinoConstant><ConstantForPartLinkLowerVairableName>latch_wheel_latching_switch</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>statusStatus_Led</Name><Description>Finally, the status_status_led wire leads from Pin-11 to an orange LED for general status indication of the system.</Description><ConstantForPartLink>recWb4vxXgcm65Sv7</ConstantForPartLink><Type>unsigned int</Type><Category>Parts</Category><ConstantForPartLinkVariableNameCamelCase>statusStatus_Led</ConstantForPartLinkVariableNameCamelCase><VariableNameCamelCase>statusStatus_Led</VariableNameCamelCase><LowerVariableName>status_status_led</LowerVariableName><ArduinoConstantCore>const unsigned int status_status_led</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int status_status_led;</ArduinoConstantHeader><ConstantForPartLinkDescription>Finally, the status_status_led wire leads from Pin-11 to an orange LED for general status indication of the system.</ConstantForPartLinkDescription><ConstantForPartLinkPinNumber>11</ConstantForPartLinkPinNumber><ConstantValue>11</ConstantValue><ArduinoConstant>const unsigned int status_status_led = 11; // Finally, the status_status_led wire leads from Pin-11 to an orange LED for general status indication of the system.</ArduinoConstant><ConstantForPartLinkLowerVairableName>status_status_led</ConstantForPartLinkLowerVairableName></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>initialTimesToBeep</Name><Description>The number of times that the sound should occur</Description><CustomDescription>The number of times that the sound should occur</CustomDescription><CustomConstantValue>5</CustomConstantValue><Type>unsigned int</Type><Category>Reminders</Category><VariableNameCamelCase>initialTimesToBeep</VariableNameCamelCase><LowerVariableName>initial_times_to_beep</LowerVariableName><ArduinoConstantCore>const unsigned int initial_times_to_beep</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int initial_times_to_beep;</ArduinoConstantHeader><ConstantValue>5</ConstantValue><ArduinoConstant>const unsigned int initial_times_to_beep = 5; // The number of times that the sound should occur</ArduinoConstant><CategoryLabel>Reminders constants</CategoryLabel></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>initialReminderDelaySeconds</Name><Description>How many seconds should be between the first reminder, and the second</Description><CustomDescription>How many seconds should be between the first reminder, and the second</CustomDescription><CustomConstantValue>2</CustomConstantValue><Type>unsigned int</Type><Category>Reminders</Category><VariableNameCamelCase>initialReminderDelaySeconds</VariableNameCamelCase><LowerVariableName>initial_reminder_delay_seconds</LowerVariableName><ArduinoConstantCore>const unsigned int initial_reminder_delay_seconds</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int initial_reminder_delay_seconds;</ArduinoConstantHeader><ConstantValue>2</ConstantValue><ArduinoConstant>const unsigned int initial_reminder_delay_seconds = 2; // How many seconds should be between the first reminder, and the second</ArduinoConstant></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>msPerMinute</Name><Description>How many millisconds should a "minute" be</Description><CustomDescription>How many millisconds should a "minute" be</CustomDescription><CustomConstantValue>60000</CustomConstantValue><DebugConstantValue>8000</DebugConstantValue><Type>unsigned int</Type><Category>SpeedOfTime</Category><VariableNameCamelCase>msPerMinute</VariableNameCamelCase><LowerVariableName>ms_per_minute</LowerVariableName><ArduinoConstantCore>const unsigned int ms_per_minute</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int ms_per_minute;</ArduinoConstantHeader><ConstantValue>60000</ConstantValue><ArduinoConstant>#ifdef DEBUG  //How many millisconds should a "minute" be
const unsigned int ms_per_minute = 8000;
#else
const unsigned int ms_per_minute = 60000;
#endif
</ArduinoConstant><CategoryLabel>SpeedOfTime constants</CategoryLabel></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>minutesPerDay</Name><Description>How many "minutes" should be in a day</Description><CustomDescription>How many "minutes" should be in a day</CustomDescription><CustomConstantValue>1440</CustomConstantValue><DebugConstantValue>4</DebugConstantValue><Type>unsigned int</Type><Category>SpeedOfTime</Category><VariableNameCamelCase>minutesPerDay</VariableNameCamelCase><LowerVariableName>minutes_per_day</LowerVariableName><ArduinoConstantCore>const unsigned int minutes_per_day</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int minutes_per_day;</ArduinoConstantHeader><ConstantValue>1440</ConstantValue><ArduinoConstant>#ifdef DEBUG  //How many "minutes" should be in a day
const unsigned int minutes_per_day = 4;
#else
const unsigned int minutes_per_day = 1440;
#endif
</ArduinoConstant></Constant><Constant json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>msBetweenBeeps</Name><Description>Milliseconds that should be silent between beeps</Description><CustomDescription>Milliseconds that should be silent between beeps</CustomDescription><CustomConstantValue>85</CustomConstantValue><Type>unsigned int</Type><Category>SpeedOfTime</Category><VariableNameCamelCase>msBetweenBeeps</VariableNameCamelCase><LowerVariableName>ms_between_beeps</LowerVariableName><ArduinoConstantCore>const unsigned int ms_between_beeps</ArduinoConstantCore><ArduinoConstantHeader>extern const unsigned int ms_between_beeps;</ArduinoConstantHeader><ConstantValue>85</ConstantValue><ArduinoConstant>const unsigned int ms_between_beeps = 85; // Milliseconds that should be silent between beeps</ArduinoConstant></Constant></Constants><PartTypes><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>ArduinoR4</Name><Description></Description><QuantityNeeded>1</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>0</CountAllLinkFromParts><Parts></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>Breadboard</Name><Description></Description><QuantityNeeded>1</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>0</CountAllLinkFromParts><Parts></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>HallEffectSensor</Name><Description></Description><QuantityNeeded>4</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>4</CountAllLinkFromParts><Parts><Part json:Array="true"><Name>HallEffectSensor-01-SenseBit1</Name><Description></Description><PartIndex>1</PartIndex><Color>White</Color><Quantity>1</Quantity><Purpose>SenseBit1</Purpose><PartType><Name>HallEffectSensor</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-04-Bit1SensorPin-HallEffectSensor</Name><Description>Connecting Pin-4 to a white Hall Effect Sensor, the sense_bit1_hall_effect_sensor wire senses the first bit's magnetic field change.</Description><PinNumber>4</PinNumber><ToPartName>Pin-04-Bit1SensorPin</ToPartName><ToPartColor>White</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>SenseBit1</ToPartPurposes><ToPartPartTypeName>HallEffectSensor</ToPartPartTypeName><LowerVariableName>sense_bit1_hall_effect_sensor</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>HallEffectSensor-02-SenseBit2</Name><Description></Description><PartIndex>2</PartIndex><Color>Blue</Color><Quantity>1</Quantity><Purpose>SenseBit2</Purpose><PartType><Name>HallEffectSensor</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-06-Bit2SensorPin-HallEffectSensor</Name><Description>The sense_bit2_hall_effect_sensor wire from Pin-6 to a blue Hall Effect Sensor detects the magnetic changes for the second bit.</Description><PinNumber>6</PinNumber><ToPartName>Pin-06-Bit2SensorPin</ToPartName><ToPartColor>Blue</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>SenseBit2</ToPartPurposes><ToPartPartTypeName>HallEffectSensor</ToPartPartTypeName><LowerVariableName>sense_bit2_hall_effect_sensor</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>HallEffectSensor-03-SenseAmPm</Name><Description></Description><PartIndex>3</PartIndex><Color>Yellow</Color><Quantity>1</Quantity><Purpose>SenseAmPm</Purpose><PartType><Name>HallEffectSensor</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-08-AmPmSensorPin-HallEffectSensor</Name><Description>The sense_am_pm_hall_effect_sensor wire from Pin-8 connects to a yellow Hall Effect Sensor to detect AM/PM status changes.</Description><PinNumber>8</PinNumber><ToPartName>Pin-08-AmPmSensorPin</ToPartName><ToPartColor>Yellow</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>SenseAmPm</ToPartPurposes><ToPartPartTypeName>HallEffectSensor</ToPartPartTypeName><LowerVariableName>sense_am_pm_hall_effect_sensor</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>HallEffectSensor-04-SenseWheel</Name><Description></Description><PartIndex>4</PartIndex><Color>Red</Color><Quantity>1</Quantity><Purpose>SenseWheel</Purpose><PartType><Name>HallEffectSensor</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-10-WheelSensorPin-HallEffectSensor</Name><Description>Connecting Pin-10 to a red Hall Effect Sensor, the sense_wheel_hall_effect_sensor wire monitors wheel movements for medication timings.</Description><PinNumber>10</PinNumber><ToPartName>Pin-10-WheelSensorPin</ToPartName><ToPartColor>Red</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>SenseWheel</ToPartPurposes><ToPartPartTypeName>HallEffectSensor</ToPartPartTypeName><LowerVariableName>sense_wheel_hall_effect_sensor</LowerVariableName></PartLink></ToPartLinks></Part></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>JumperWire</Name><Description></Description><QuantityNeeded>10</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>0</CountAllLinkFromParts><Parts><Part json:Array="true"><Name>JumperWire-0-ConnectParts</Name><Description></Description><PartIndex></PartIndex><Color>Orange</Color><Quantity>2</Quantity><Purpose>ConnectParts</Purpose><PartType><Name>JumperWire</Name><QuantityNeeded>10</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks></ToPartLinks></Part><Part json:Array="true"><Name>JumperWire-0-ConnectParts</Name><Description></Description><PartIndex></PartIndex><Color>White</Color><Quantity>2</Quantity><Purpose>ConnectParts</Purpose><PartType><Name>JumperWire</Name><QuantityNeeded>10</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks></ToPartLinks></Part><Part json:Array="true"><Name>JumperWire-0-ConnectParts</Name><Description></Description><PartIndex></PartIndex><Color>Blue</Color><Quantity>2</Quantity><Purpose>ConnectParts</Purpose><PartType><Name>JumperWire</Name><QuantityNeeded>10</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks></ToPartLinks></Part><Part json:Array="true"><Name>JumperWire-0-ConnectParts</Name><Description></Description><PartIndex></PartIndex><Color>Yellow</Color><Quantity>2</Quantity><Purpose>ConnectParts</Purpose><PartType><Name>JumperWire</Name><QuantityNeeded>10</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks></ToPartLinks></Part><Part json:Array="true"><Name>JumperWire-0-ConnectParts</Name><Description></Description><PartIndex></PartIndex><Color>Red</Color><Quantity>2</Quantity><Purpose>ConnectParts</Purpose><PartType><Name>JumperWire</Name><QuantityNeeded>10</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks></ToPartLinks></Part></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>LatchingSwitch</Name><Description></Description><QuantityNeeded>4</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>4</CountAllLinkFromParts><Parts><Part json:Array="true"><Name>LatchingSwitch-01-LatchBit1</Name><Description></Description><PartIndex>1</PartIndex><Color>White</Color><Quantity>1</Quantity><Purpose>LatchBit1</Purpose><PartType><Name>LatchingSwitch</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-04-Bit1SensorPin-LatchingSwitch</Name><Description>The latch_bit1_latching_switch wire from Pin-4 to a white Latching Switch captures the first bit's physical state changes.</Description><PinNumber>4</PinNumber><ToPartName>Pin-04-Bit1SensorPin</ToPartName><ToPartColor>White</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>LatchBit1</ToPartPurposes><ToPartPartTypeName>LatchingSwitch</ToPartPartTypeName><LowerVariableName>latch_bit1_latching_switch</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>LatchingSwitch-02-LatchBit2</Name><Description></Description><PartIndex>2</PartIndex><Color>Blue</Color><Quantity>1</Quantity><Purpose>LatchBit2</Purpose><PartType><Name>LatchingSwitch</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-06-Bit2SensorPin-LatchingSwitch</Name><Description>Pin-6 also connects to a blue Latching Switch through the latch_bit2_latching_switch wire to lock the second bit's state.</Description><PinNumber>6</PinNumber><ToPartName>Pin-06-Bit2SensorPin</ToPartName><ToPartColor>Blue</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>LatchBit2</ToPartPurposes><ToPartPartTypeName>LatchingSwitch</ToPartPartTypeName><LowerVariableName>latch_bit2_latching_switch</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>LatchingSwitch-03-LatchAmPm</Name><Description></Description><PartIndex>3</PartIndex><Color>Yellow</Color><Quantity>1</Quantity><Purpose>LatchAmPm</Purpose><PartType><Name>LatchingSwitch</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-08-AmPmSensorPin-LatchingSwitch</Name><Description>Also from Pin-8, the latch_am_pm_latching_switch wire links to a yellow Latching Switch for AM/PM state capture.</Description><PinNumber>8</PinNumber><ToPartName>Pin-08-AmPmSensorPin</ToPartName><ToPartColor>Yellow</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>LatchAmPm</ToPartPurposes><ToPartPartTypeName>LatchingSwitch</ToPartPartTypeName><LowerVariableName>latch_am_pm_latching_switch</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>LatchingSwitch-04-LatchWheel</Name><Description></Description><PartIndex>4</PartIndex><Color>Red</Color><Quantity>1</Quantity><Purpose>LatchWheel</Purpose><PartType><Name>LatchingSwitch</Name><QuantityNeeded>4</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-10-WheelSensorPin-LatchingSwitch</Name><Description>The latch_wheel_latching_switch wire from Pin-10 to a red Latching Switch secures the wheel's position post-movement.</Description><PinNumber>10</PinNumber><ToPartName>Pin-10-WheelSensorPin</ToPartName><ToPartColor>Red</ToPartColor><ToPartCount>2</ToPartCount><ToPartPurposes>LatchWheel</ToPartPurposes><ToPartPartTypeName>LatchingSwitch</ToPartPartTypeName><LowerVariableName>latch_wheel_latching_switch</LowerVariableName></PartLink></ToPartLinks></Part></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>Led</Name><Description></Description><QuantityNeeded>5</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>5</CountAllLinkFromParts><Parts><Part json:Array="true"><Name>Led-01-Bit1Status</Name><Description></Description><PartIndex>1</PartIndex><Color>White</Color><Quantity>1</Quantity><Purpose>Bit1Status</Purpose><PartType><Name>Led</Name><QuantityNeeded>5</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-03-Bit1LedPin-Led</Name><Description>The bit1_status_led wire runs from Pin-3 to a white LED indicating the status of the first bit for medication timing.</Description><PinNumber>3</PinNumber><ToPartName>Pin-03-Bit1LedPin</ToPartName><ToPartColor>White</ToPartColor><ToPartCount>1</ToPartCount><ToPartPurposes>Bit1Status</ToPartPurposes><ToPartPartTypeName>Led</ToPartPartTypeName><LowerVariableName>bit1_status_led</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>Led-02-Bit2Status</Name><Description></Description><PartIndex>2</PartIndex><Color>Red</Color><Quantity>1</Quantity><Purpose>Bit2Status</Purpose><PartType><Name>Led</Name><QuantityNeeded>5</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-05-Bit2LedPin-Led</Name><Description>From Pin-5, the bit2_status_led wire leads to a blue LED displaying the second bit's status linked to medication events.</Description><PinNumber>5</PinNumber><ToPartName>Pin-05-Bit2LedPin</ToPartName><ToPartColor>Blue</ToPartColor><ToPartCount>1</ToPartCount><ToPartPurposes>Bit2Status</ToPartPurposes><ToPartPartTypeName>Led</ToPartPartTypeName><LowerVariableName>bit2_status_led</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>Led-03-AmPmStatus</Name><Description></Description><PartIndex>3</PartIndex><Color>Yellow</Color><Quantity>1</Quantity><Purpose>AmPmStatus</Purpose><PartType><Name>Led</Name><QuantityNeeded>5</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-07-AmPmLedPin-Led</Name><Description>A yellow LED connected by the am_pm_status_led wire from Pin-7 indicates the AM or PM medication status.</Description><PinNumber>7</PinNumber><ToPartName>Pin-07-AmPmLedPin</ToPartName><ToPartColor>Yellow</ToPartColor><ToPartCount>1</ToPartCount><ToPartPurposes>AmPmStatus</ToPartPurposes><ToPartPartTypeName>Led</ToPartPartTypeName><LowerVariableName>am_pm_status_led</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>Led-04-WheelStatus</Name><Description></Description><PartIndex>4</PartIndex><Color>Red</Color><Quantity>1</Quantity><Purpose>WheelStatus</Purpose><PartType><Name>Led</Name><QuantityNeeded>5</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-09-WheelLedPin-Led</Name><Description>Pin-9's wheel_status_led wire attaches to a red LED, which shows the wheel movement status, reflecting medication dispensing actions.</Description><PinNumber>9</PinNumber><ToPartName>Pin-09-WheelLedPin</ToPartName><ToPartColor>Red</ToPartColor><ToPartCount>1</ToPartCount><ToPartPurposes>WheelStatus</ToPartPurposes><ToPartPartTypeName>Led</ToPartPartTypeName><LowerVariableName>wheel_status_led</LowerVariableName></PartLink></ToPartLinks></Part><Part json:Array="true"><Name>Led-05-StatusStatus</Name><Description></Description><PartIndex>5</PartIndex><Color>Orange</Color><Quantity>1</Quantity><Purpose>StatusStatus</Purpose><PartType><Name>Led</Name><QuantityNeeded>5</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-11-StatusLedPin-Led</Name><Description>Finally, the status_status_led wire leads from Pin-11 to an orange LED for general status indication of the system.</Description><PinNumber>11</PinNumber><ToPartName>Pin-11-StatusLedPin</ToPartName><ToPartColor>Orange</ToPartColor><ToPartCount>1</ToPartCount><ToPartPurposes>StatusStatus</ToPartPurposes><ToPartPartTypeName>Led</ToPartPartTypeName><LowerVariableName>status_status_led</LowerVariableName></PartLink></ToPartLinks></Part></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>NeoDimiumMagnets</Name><Description></Description><QuantityNeeded>26</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>0</CountAllLinkFromParts><Parts><Part json:Array="true"><Name>NeoDimiumMagnets-0-</Name><Description></Description><PartIndex></PartIndex><Color>Silver</Color><Quantity>26</Quantity><Purpose></Purpose><PartType><Name>NeoDimiumMagnets</Name><QuantityNeeded>26</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks></ToPartLinks></Part></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>Round7DayPillDispenser</Name><Description></Description><QuantityNeeded>2</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>0</CountAllLinkFromParts><Parts><Part json:Array="true"><Name>Round7DayPillDispenser-0-</Name><Description></Description><PartIndex></PartIndex><Color>Blue</Color><Quantity>2</Quantity><Purpose></Purpose><PartType><Name>Round7DayPillDispenser</Name><QuantityNeeded>2</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks></ToPartLinks></Part></Parts></PartType><PartType json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Name>Speaker</Name><Description></Description><QuantityNeeded>1</QuantityNeeded><CountAllLinkToParts>0</CountAllLinkToParts><CountAllLinkFromParts>1</CountAllLinkFromParts><Parts><Part json:Array="true"><Name>Speaker-01-StatusBeeps</Name><Description></Description><PartIndex>1</PartIndex><Color>Orange</Color><Quantity>1</Quantity><Purpose>StatusBeeps</Purpose><PartType><Name>Speaker</Name><QuantityNeeded>1</QuantityNeeded></PartType><FromPartLinks></FromPartLinks><ToPartLinks><PartLink json:Array="true"><Name>Pin-02-SpeakerPin-Speaker</Name><Description>The status_beeps_speaker wire connects Pin-2 to a speaker emitting auditory beeps for status alerts in an orange color.</Description><PinNumber>2</PinNumber><ToPartName>Pin-02-SpeakerPin</ToPartName><ToPartColor>Orange</ToPartColor><ToPartCount>1</ToPartCount><ToPartPurposes>StatusBeeps</ToPartPurposes><ToPartPartTypeName>Speaker</ToPartPartTypeName><LowerVariableName>status_beeps_speaker</LowerVariableName></PartLink></ToPartLinks></Part></Parts></PartType></PartTypes><FSMs><FSM><Name>Med Reminder</Name><InitialStateName>Bootup</InitialStateName></FSM></FSMs><MachineStates><MachineState><Name>Bootup</Name><Description>Initializes the system and prepares for operation.  </Description><FromTransitions><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Initializes the recording of the current time slice immediately after system startup</Description><ActionName>BootupCompleted</ActionName><ToStateName>GatherReminders</ToStateName><Name>Bootup-to-GatherReminders-after-15000-BootupCompleted</Name></FromTransition></FromTransitions><ToTransitions></ToTransitions></MachineState><MachineState><Name>GatherReminders</Name><Description>Awaits the time for the first medication reminder.  </Description><FromTransitions><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Waits for the first medication reminder after the initial setup is completed.</Description><ActionName>GatheringRemindersCompleted</ActionName><ToStateName>SaveReminders</ToStateName><Name>GatherReminders-to-SaveReminders-after--GatheringRemindersCompleted</Name></FromTransition></FromTransitions><ToTransitions><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Initializes the recording of the current time slice immediately after system startup</Description><ActionName>BootupCompleted</ActionName><FromStateName>Bootup</FromStateName><Name>Bootup-to-GatherReminders-after-15000-BootupCompleted</Name></ToTransition></ToTransitions></MachineState><MachineState><Name>SaveReminders</Name><Description>Captures the current time as a reference point for tracking.  </Description><FromTransitions><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Saves reminder times for future reference and then moves to Idle.</Description><ActionName>RemindersSaved</ActionName><ToStateName>Idle</ToStateName><Name>SaveReminders-to-Idle-after--RemindersSaved</Name></FromTransition></FromTransitions><ToTransitions><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Waits for the first medication reminder after the initial setup is completed.</Description><ActionName>GatheringRemindersCompleted</ActionName><FromStateName>GatherReminders</FromStateName><Name>GatherReminders-to-SaveReminders-after--GatheringRemindersCompleted</Name></ToTransition></ToTransitions></MachineState><MachineState><Name>Reminding</Name><Description></Description><FromTransitions><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Quite the reminder, when the wheel moves</Description><ActionName>WheelMoved</ActionName><ToStateName>DebounceMovement</ToStateName><Name>Reminding-to-DebounceMovement-after--WheelMoved</Name></FromTransition></FromTransitions><ToTransitions><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Alert periodically until the wheel next moves</Description><ActionName>ReminderTimeReached</ActionName><FromStateName>Idle</FromStateName><Name>Idle-to-Reminding-after--ReminderTimeReached</Name></ToTransition><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>If the movement while reminding doesn't actually complete, keep reminding.</Description><ActionName>ReminderDebounceFailed</ActionName><FromStateName>DebounceMovement</FromStateName><Name>DebounceMovement-to-Reminding-after--ReminderDebounceFailed</Name></ToTransition></ToTransitions></MachineState><MachineState><Name>Idle</Name><Description>The system is in a standby mode, waiting for interaction or the next event.  </Description><FromTransitions><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Alert periodically until the wheel next moves</Description><ActionName>ReminderTimeReached</ActionName><ToStateName>Reminding</ToStateName><Name>Idle-to-Reminding-after--ReminderTimeReached</Name></FromTransition><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Filters out false wheel movements to prevent erroneous operations.</Description><ActionName>WheelMoved</ActionName><ToStateName>DebounceMovement</ToStateName><Name>Idle-to-DebounceMovement-after--WheelMoved</Name></FromTransition></FromTransitions><ToTransitions><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Saves reminder times for future reference and then moves to Idle.</Description><ActionName>RemindersSaved</ActionName><FromStateName>SaveReminders</FromStateName><Name>SaveReminders-to-Idle-after--RemindersSaved</Name></ToTransition><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Returns to idle on failing to validate the wheel movement (debouncing).</Description><ActionName>DebounceFailed</ActionName><FromStateName>DebounceMovement</FromStateName><Name>DebounceMovement-to-Idle-after--DebounceFailed</Name></ToTransition><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Completes processing of movement and awaits further user interaction.</Description><ActionName>MovementHandled</ActionName><FromStateName>MovementDetected</FromStateName><Name>MovementDetected-to-Idle-after--MovementHandled</Name></ToTransition></ToTransitions></MachineState><MachineState><Name>DebounceMovement</Name><Description>Filters out false movements to ensure accurate detection.  </Description><FromTransitions><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>If the movement while reminding doesn't actually complete, keep reminding.</Description><ActionName>ReminderDebounceFailed</ActionName><ToStateName>Reminding</ToStateName><Name>DebounceMovement-to-Reminding-after--ReminderDebounceFailed</Name></FromTransition><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Returns to idle on failing to validate the wheel movement (debouncing).</Description><ActionName>DebounceFailed</ActionName><ToStateName>Idle</ToStateName><Name>DebounceMovement-to-Idle-after--DebounceFailed</Name></FromTransition><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Counts validated wheel movement towards medication adherence tracking.</Description><ActionName>DebouncePassed</ActionName><ToStateName>MovementDetected</ToStateName><Name>DebounceMovement-to-MovementDetected-after--DebouncePassed</Name></FromTransition></FromTransitions><ToTransitions><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Quite the reminder, when the wheel moves</Description><ActionName>WheelMoved</ActionName><FromStateName>Reminding</FromStateName><Name>Reminding-to-DebounceMovement-after--WheelMoved</Name></ToTransition><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Filters out false wheel movements to prevent erroneous operations.</Description><ActionName>WheelMoved</ActionName><FromStateName>Idle</FromStateName><Name>Idle-to-DebounceMovement-after--WheelMoved</Name></ToTransition></ToTransitions></MachineState><MachineState><Name>MovementDetected</Name><Description>Detects confirmed movement, signaling a completed interaction.  </Description><FromTransitions><FromTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Completes processing of movement and awaits further user interaction.</Description><ActionName>MovementHandled</ActionName><ToStateName>Idle</ToStateName><Name>MovementDetected-to-Idle-after--MovementHandled</Name></FromTransition></FromTransitions><ToTransitions><ToTransition json:Array="true" xmlns:json="http://james.newtonking.com/projects/json"><Description>Counts validated wheel movement towards medication adherence tracking.</Description><ActionName>DebouncePassed</ActionName><FromStateName>DebounceMovement</FromStateName><Name>DebounceMovement-to-MovementDetected-after--DebouncePassed</Name></ToTransition></ToTransitions></MachineState></MachineStates></MedReminder>